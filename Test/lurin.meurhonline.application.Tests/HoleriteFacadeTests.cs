using System;
using System.Configuration;
using System.Collections.Generic;
using System.Data.Entity;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using lurin.meurhonline.application;
using lurin.meurhonline.domain.model;
using lurin.meurhonline.infrastructure.persistence;
using lurin.meurhonline.infrastructure.persistence.interfaces;

namespace lurin.meurhonline.application.Tests
{
    [TestClass]
    public class HoleriteFacadeTests
    {
        public static IUnitOfWorkCustom unitOfWork;
        public static HoleriteFacade holeriteFacade;

        public HoleriteFacadeTests()
        {
            unitOfWork = new UnitOfWork();
            holeriteFacade = new HoleriteFacade();
        }

        [TestMethod]
        public void AdicionarCartaoPonto_SUCESS()
        {
            var holeriteModel = new HoleriteModel();
            holeriteModel.DocumentoBase64 = "IElORFVTVFJJQSBFIENPTUVSQ0lPIEpPTElURVggTFREQSAgICAgICAgICAgICBKYW5laXJvLzIwMjEgTWVuc2FsIA0KDQogICAgMjEwMS02IEpBTklMU09OIE9MSVZFSVJBIFNBTlRBTkEgICAgICAgICAgICAgICANCiAgICAgICAgICAgNTI4ODctMCAgIEVOQy5UVUZULiAgICAgICAgICAgIDEgICAyICAgIDEwNTAyMDQwMDAgICAgICAgICAgDQoNCg0KMDAxIEhycyBOb3JtYWlzIERpdXJuYXMgICAgICAgICAgMTc2LDAwMCAgICAgMy4yNjYsMTEgKw0KMDMxIEhycyBSZXBvdXNvIFJlbXVuZXJhZG8gICAgICAgIDQ0LDAwMCAgICAgICA4MTYsNTMgKw0KNDA0IEFkaWFudGFtZW50byBOb3JtYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjA0MiwzMCAtDQo0MTAgRU1QUkVTVElNTyBDT05TSUdOQURPICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTIzLDkwIC0NCjQ1MyBSZWZlaWNhbyAoRikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjUsNzQgLQ0KNDkxIFNlZ3VybyBkZSBWaWRhICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSw0MiAtDQo1MTEgSU5TUyBOb3JtYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDIyLDg0IC0NCjU2NyBJUkYgUmVjb2xoaWRvIFBndG8gQWRpYW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzODYsNjIgLQ0KNjYwIFBlbnNhbyBBbGltLiBOb3JtYWwgKEVtcHIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjE3MSw4MSAtDQogDQogDQogDQogDQogDQogDQogDQogDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0LjA4Miw2NCsgICAgICAzLjU3NCw2My0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUwOCwwMQ0KDQogICAgNC4wODIsNjQgICAgICA0LjA4Miw2NCAgICAgIDQuMDgyLDY0ICAgICAgIDMyNiw2MSAgICAgICAgNDkwLDMwDQoNCg0KDQoNCg0KIElORFVTVFJJQSBFIENPTUVSQ0lPIEpPTElURVggTFREQSAgICAgICAgICAgICBKYW5laXJvLzIwMjEgTWVuc2FsIA0KDQogICAgMjMyOC0wIEFOVE9OSU8gUk9EUklHVUVTIFNPQlJJTkhPICAgICAgICAgICAgICANCiAgICAgICAgICAgNTI5MTgtMyAgIEVOQyBNQU5VVCAgICAgICAgICAgIDEgICAyICAgIDEwNTAyMDE1MDAgICAgICAgICAgDQoNCg0KMDAxIEhycyBOb3JtYWlzIERpdXJuYXMgICAgICAgICAgMTM5LDMzNCAgICAgMy4xMzgsNDMgKw0KMDMxIEhycyBSZXBvdXNvIFJlbXVuZXJhZG8gICAgICAgIDI5LDMzMyAgICAgICA2NjAsNzEgKw0KMDcxIEhycyBBZGljaW9uYWwgSW5zYWx1YnJpZGEgICAgMTY4LDY2NyAgICAgICAxNzgsNDEgKw0KMjIxIEZlcmlhcyBOb3JtYWlzICAgICAgICAgICAgICAgIDUxLDMzMyAgICAgMS4yMDUsMDIgKw0KMjIyIEZlcmlhcyBBZGljaW9uYWlzICAgICAgICAgICAgICAgICAgICAgICAgICAgOTQsMjAgKw0KMjI3IEZlcmlhcyAxLzMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MzMsMDcgKw0KMjM3IEZlcmlhcyBQYWdhcyBubyBNZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLjQyOCwxNCAtDQo0MDQgQWRpYW50YW1lbnRvIE5vcm1hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMDEwLDczIC0NCjQ1MyBSZWZlaWNhbyAoRikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQsNjggLQ0KNDcxIEFzc2lzdGVuY2lhIE1lZGljYSAoRikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI4MiwwMCAtDQo0OTEgU2VndXJvIGRlIFZpZGEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLDQyIC0NCjUxMSBJTlNTIE5vcm1hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA2NTAsNjUgLQ0KNTY0IElSRiBSZWNvbGhpZG8gbm8gUGd0byBGZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExNiw0OCAtDQo1NjcgSVJGIFJlY29saGlkbyBQZ3RvIEFkaWFudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzMyLDAyIC0NCiANCiANCiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUuNzA5LDg0KyAgICAgIDMuODI2LDEyLQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuODgzLDcyDQoNCiAgICA0Ljk1NSwzOSAgICAgIDUuNzA5LDg0ICAgICAgNS43MDksODQgICAgICAgNDU2LDc4ICAgICAgMS42MDMsMDUNCg0KDQoNCg0KDQogSU5EVVNUUklBIEUgQ09NRVJDSU8gSk9MSVRFWCBMVERBICAgICAgICAgICAgIEphbmVpcm8vMjAyMSBIb3Jpc3RhDQoNCiAgICAyNTA0LTYgSk9TRSBST0NIQSBERSBRVUVJUk9aICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICA1MjkwMC0xICAgT1BFUiBJViAgICAgICAgICAgICAgMSAgIDIgICAgMTA1MDIwMDUwMyAgICAgICAgICANCg0KDQowMDEgSHJzIE5vcm1haXMgRGl1cm5hcyAgICAgICAgICAxODMsMzMzICAgICAxLjQ3OSw1MCArDQowMzEgSHJzIFJlcG91c28gUmVtdW5lcmFkbyAgICAgICAgNDQsMDAwICAgICAgIDM1NSwwOCArDQo0MDQgQWRpYW50YW1lbnRvIE5vcm1hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNjIxLDM5IC0NCjQ1MyBSZWZlaWNhbyAoRikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzAsNDIgLQ0KNDkxIFNlZ3VybyBkZSBWaWRhICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSw0MiAtDQo1MTEgSU5TUyBOb3JtYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTQ4LDYxIC0NCiANCiANCiANCiANCiANCiANCiANCiANCiANCiANCiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuODM0LDU4KyAgICAgICAgODAxLDg0LQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMDMyLDc0DQoNCiAgICAgICAgOCwwNyAgICAgIDEuODM0LDU4ICAgICAgMS44MzQsNTggICAgICAgMTQ2LDc2ICAgICAgMS4wNjQsNTgNCg0KDQoNCg0KDQogSU5EVVNUUklBIEUgQ09NRVJDSU8gSk9MSVRFWCBMVERBICAgICAgICAgICAgIEphbmVpcm8vMjAyMSBNZW5zYWwgDQoNCiAgICAyMDQ0LTMgQ0VTQVIgQUxWRVMgQUJSQU5URVMgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICA2MTQwMC0zICAgTElERVIgICAgICAgICAgICAgICAgMSAgIDMgICAgMTA0MDI1MTUwNiAgICAgICAgICANCg0KDQowMDEgSHJzIE5vcm1haXMgRGl1cm5hcyAgICAgICAgICAxNjUsNTAwICAgICAxLjcyMiw3NyArDQowMzEgSHJzIFJlcG91c28gUmVtdW5lcmFkbyAgICAgICAgNDQsMDAwICAgICAgIDQ1OCwwMiArDQowNzEgSHJzIEFkaWNpb25hbCBJbnNhbHVicmlkYSAgICAyMDksNTAwICAgICAgIDIyMSw2MCArDQoyMDIgSHJzIEZhbHRhcyBBYiBMZWdhaXMgRGl1ciAgICAgMTAsNTAwICAgICAgIDEwOSwzMCArDQo0MDQgQWRpYW50YW1lbnRvIE5vcm1hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNzAzLDE1IC0NCjQ1MyBSZWZlaWNhbyAoRikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDksMTQgLQ0KNDkxIFNlZ3VybyBkZSBWaWRhICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSw0MiAtDQo0OTIgUGxhbm8gT2RvbnRvbG9naWNvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEzLDYyIC0NCjUxMSBJTlNTIE5vcm1hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMTgsNzkgLQ0KNTY3IElSRiBSZWNvbGhpZG8gUGd0byBBZGlhbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA5OCwzOCAtDQo2NzggRmFybWFjaWEgKDUwJSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU4LDIyIC0NCiANCiANCiANCiANCiANCiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIuNTExLDY5KyAgICAgIDEuMTQyLDcyLQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMzY4LDk3DQoNCiAgICAyLjI5MCwwOSAgICAgIDIuNTExLDY5ICAgICAgMi41MTEsNjkgICAgICAgMjAwLDkzICAgICAgMS40OTEsMzcNCg0KDQoNCg0KDQogSU5EVVNUUklBIEUgQ09NRVJDSU8gSk9MSVRFWCBMVERBICAgICAgICAgICAgIEphbmVpcm8vMjAyMSBNZW5zYWwgDQoNCiAgICA0OTM2LTAgSk9TRSBSQUlNVU5ETyBERSBTT1VTQSAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICA2MTY4Ny01ICAgQk9NQkVJUk8gICAgICAgICAgICAgMSAgIDMgICAgMTAyMDM1MTUwNSAgICAgICAgICANCg0KDQowMDEgSHJzIE5vcm1haXMgRGl1cm5hcyAgICAgICAgICAxNDcsNzAwICAgICAxLjM2NCw1MSArDQowMzEgSHJzIFJlcG91c28gUmVtdW5lcmFkbyAgICAgICAgNDQsMDAwICAgICAgIDQwNiw0OSArDQowOTEgSHJzIEFkaWNpb25hbCBQZXJpY3Vsb3NpZCAgICAxOTEsNzAwICAgICAgIDUzMSwzMCArDQoyMDIgSHJzIEZhbHRhcyBBYiBMZWdhaXMgRGl1ciAgICAgMjgsMzAwICAgICAgIDI2MSw0NSArDQo0MDQgQWRpYW50YW1lbnRvIE5vcm1hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNjIyLDkzIC0NCjQ1MyBSZWZlaWNhbyAoRikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzksNzggLQ0KNDkxIFNlZ3VybyBkZSBWaWRhICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSw0MiAtDQo0OTIgUGxhbm8gT2RvbnRvbG9naWNvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEzLDYyIC0NCjUxMSBJTlNTIE5vcm1hbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMjUsMDQgLQ0KNTY3IElSRiBSZWNvbGhpZG8gUGd0byBBZGlhbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA4OCw0MyAtDQo2NjAgUGVuc2FvIEFsaW0uIE5vcm1hbCAoRW1wciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjc2LDczIC0NCiANCiANCiANCiANCiANCiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIuNTYzLDc1KyAgICAgIDEuMjY3LDk1LQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEuMjk1LDgwDQoNCiAgICAyLjAzMiw0NSAgICAgIDIuNTYzLDc1ICAgICAgMi41NjMsNzUgICAgICAgMjA1LDEwICAgICAgMS4zNTAsNjINCg0KDQoNCg0KDQo=";

            var result = holeriteFacade.AdicionarHolerite(holeriteModel);

            if (result == null)
                Assert.IsNull(result);
            else
                Assert.IsNotNull(result);
        }

        [TestMethod]
        public void BuscarCartaoPontoPorId_SUCESS()
        {
            int holerite = 4;

            var result = holeriteFacade.BuscarHoleritePorId(holerite);

            if (result == null)
                Assert.IsNull(result);
            else
                Assert.IsNotNull(result);
        }

        [TestMethod]
        public void BuscarCartaoPontoPorColaboradorId_SUCESS()
        {
            int ColabotadorId = 2;
            string Mes = "03";
            string Ano = "2021";

            var result = holeriteFacade.BuscarHoleritePorColaboradorIdMesAno(ColabotadorId, Mes, Ano, null);

            if (result == null)
                Assert.IsNull(result);
            else
                Assert.IsNotNull(result);
        }
    }
}